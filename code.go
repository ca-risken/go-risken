// AUTOGENERATED FILE BY CODE GENERATOR. DO NOT EDIT.
// Source: generator.yaml
package risken

import (
	"context"

	proto "github.com/ca-risken/datasource-api/proto/code"
)

func (c *Client) ListCodeDataSource(ctx context.Context, req *proto.ListDataSourceRequest) (*proto.ListDataSourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/code/list-datasource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListDataSourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListGitHubSetting(ctx context.Context, req *proto.ListGitHubSettingRequest) (*proto.ListGitHubSettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/code/list-github-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListGitHubSettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListGitleaksCache(ctx context.Context, req *proto.ListGitleaksCacheRequest) (*proto.ListGitleaksCacheResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/code/list-gitleaks-cache", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListGitleaksCacheResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) PutGitHubSetting(ctx context.Context, req *proto.PutGitHubSettingRequest) (*proto.PutGitHubSettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/put-github-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutGitHubSettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteGitHubSetting(ctx context.Context, req *proto.DeleteGitHubSettingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/delete-github-setting", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutGitleaksSetting(ctx context.Context, req *proto.PutGitleaksSettingRequest) (*proto.PutGitleaksSettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/put-gitleaks-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutGitleaksSettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteGitleaksSetting(ctx context.Context, req *proto.DeleteGitleaksSettingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/delete-gitleaks-setting", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutDependencySetting(ctx context.Context, req *proto.PutDependencySettingRequest) (*proto.PutDependencySettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/put-dependency-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutDependencySettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteDependencySetting(ctx context.Context, req *proto.DeleteDependencySettingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/delete-dependency-setting", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutCodeScanSetting(ctx context.Context, req *proto.PutCodeScanSettingRequest) (*proto.PutCodeScanSettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/put-code-scan-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutCodeScanSettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteCodeScanSetting(ctx context.Context, req *proto.DeleteCodeScanSettingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/delete-code-scan-setting", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) InvokeScanGitleaks(ctx context.Context, req *proto.InvokeScanGitleaksRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/invoke-scan-gitleaks", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) InvokeScanDependency(ctx context.Context, req *proto.InvokeScanDependencyRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/invoke-scan-dependency", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) InvokeScanCodeScan(ctx context.Context, req *proto.InvokeScanCodeScanRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/code/invoke-scan-code-scan", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}
