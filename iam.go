// AUTOGENERATED FILE BY CODE GENERATOR. DO NOT EDIT.
// Source: generator.yaml
package risken

import (
	"context"

	proto "github.com/ca-risken/core/proto/iam"
)

func (c *Client) ListUser(ctx context.Context, req *proto.ListUserRequest) (*proto.ListUserResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/list-user", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListUserResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUser(ctx context.Context, req *proto.GetUserRequest) (*proto.GetUserResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/get-user", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetUserResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListRole(ctx context.Context, req *proto.ListRoleRequest) (*proto.ListRoleResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/list-role", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListRoleResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetRole(ctx context.Context, req *proto.GetRoleRequest) (*proto.GetRoleResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/get-role", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetRoleResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListPolicy(ctx context.Context, req *proto.ListPolicyRequest) (*proto.ListPolicyResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/list-policy", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListPolicyResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetPolicy(ctx context.Context, req *proto.GetPolicyRequest) (*proto.GetPolicyResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/get-policy", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetPolicyResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListAccessToken(ctx context.Context, req *proto.ListAccessTokenRequest) (*proto.ListAccessTokenResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/list-access-token", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListAccessTokenResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListUserReserved(ctx context.Context, req *proto.ListUserReservedRequest) (*proto.ListUserReservedResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/iam/list-user-reserved", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListUserReservedResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) PutRole(ctx context.Context, req *proto.PutRoleRequest) (*proto.PutRoleResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/put-role", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutRoleResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteRole(ctx context.Context, req *proto.DeleteRoleRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/delete-role", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) AttachRole(ctx context.Context, req *proto.AttachRoleRequest) (*proto.AttachRoleResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/attach-role", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.AttachRoleResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DetachRole(ctx context.Context, req *proto.DetachRoleRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/detach-role", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutPolicy(ctx context.Context, req *proto.PutPolicyRequest) (*proto.PutPolicyResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/put-policy", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutPolicyResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeletePolicy(ctx context.Context, req *proto.DeletePolicyRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/delete-policy", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) AttachPolicy(ctx context.Context, req *proto.AttachPolicyRequest) (*proto.AttachPolicyResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/attach-policy", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.AttachPolicyResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DetachPolicy(ctx context.Context, req *proto.DetachPolicyRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/detach-policy", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutUserReserved(ctx context.Context, req *proto.PutUserReservedRequest) (*proto.PutUserReservedResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/put-user-reserved", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutUserReservedResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteUserReserved(ctx context.Context, req *proto.DeleteUserReservedRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/iam/delete-user-reserved", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}
