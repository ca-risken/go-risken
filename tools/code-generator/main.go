package main

import (
	"embed"
	"fmt"
	"html/template"
	"log"
	"os"

	"gopkg.in/yaml.v3"
)

//go:generate cp ../../generator.yaml ./yaml/

//go:embed yaml/*.yaml
var static embed.FS

const (
	GENERATOR_CONFIG_FILE = "yaml/generator.yaml"
	CODE_TEMPLATE         = `// AUTOGENERATED FILE BY CODE GENERATOR. DO NOT EDIT.
// Source: generator.yaml
package risken

import (
	"context"

	proto "{{.Package}}"
)
{{range .APIs}}
{{- if not .NoResponse }}
func (c *Client) {{if .MethodName}}{{.MethodName}}{{else}}{{.Name}}{{end}}(ctx context.Context, req *proto.{{.Name}}Request) (*proto.{{.Name}}Response, error) {
	httpReq, err := c.NewRequest(ctx, "{{.Method}}", "{{.Endpoint}}", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.{{.Name}}Response
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
{{- else}}
func (c *Client) {{if .MethodName}}{{.MethodName}}{{else}}{{.Name}}{{end}}(ctx context.Context, req *proto.{{.Name}}Request) error {
	httpReq, err := c.NewRequest(ctx, "{{.Method}}", "{{.Endpoint}}", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}
{{- end}}
{{end -}}
`
)

var tmpl = template.Must(template.New("code").Parse(CODE_TEMPLATE))

type Config struct {
	File    string `yaml:"file"`
	Package string `yaml:"package"`
	APIs    []API  `yaml:"apis"`
}

type API struct {
	Name       string `yaml:"name"`
	Method     string `yaml:"method"`
	Endpoint   string `yaml:"endpoint"`
	NoResponse bool   `yaml:"noResponse,omitempty"`
	MethodName string `yaml:"methodName,omitempty"`
}

func main() {
	conf, err := parseCofig()
	if err != nil {
		log.Fatal(err)
	}

	for _, c := range conf {
		if err := generate(c); err != nil {
			log.Fatal(err)
		}
	}
	fmt.Println("Code generated successfully.")
}

func parseCofig() ([]*Config, error) {
	cloud, err := static.ReadFile(GENERATOR_CONFIG_FILE)
	if err != nil {
		return nil, err
	}
	var parsed []*Config
	if err := yaml.Unmarshal(cloud, &parsed); err != nil {
		return nil, fmt.Errorf("cloud.yaml marshal error: err=%w", err)
	}
	return parsed, nil
}

func generate(c *Config) error {
	f, err := os.Create(c.File)
	if err != nil {
		return fmt.Errorf("unable to create file: %w", err)
	}
	defer f.Close()
	err = tmpl.Execute(f, c)
	if err != nil {
		return fmt.Errorf("template execute error: %w", err)
	}
	return nil
}
