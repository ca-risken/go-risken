// AUTOGENERATED FILE BY CODE GENERATOR. DO NOT EDIT.
// Source: generator.yaml
package risken

import (
	"context"

	proto "github.com/ca-risken/core/proto/finding"
)

func (c *Client) ListFinding(ctx context.Context, req *proto.ListFindingRequest) (*proto.ListFindingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-finding", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListFindingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFinding(ctx context.Context, req *proto.GetFindingRequest) (*proto.GetFindingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/get-finding", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetFindingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListFindingTag(ctx context.Context, req *proto.ListFindingTagRequest) (*proto.ListFindingTagResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-finding-tag", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListFindingTagResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListFindingTagName(ctx context.Context, req *proto.ListFindingTagNameRequest) (*proto.ListFindingTagNameResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-finding-tag-name", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListFindingTagNameResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListResource(ctx context.Context, req *proto.ListResourceRequest) (*proto.ListResourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-resource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListResourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListResourceTag(ctx context.Context, req *proto.ListResourceTagRequest) (*proto.ListResourceTagResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-resource-tag", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListResourceTagResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListResourceTagName(ctx context.Context, req *proto.ListResourceTagNameRequest) (*proto.ListResourceTagNameResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-resource-tag-name", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListResourceTagNameResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetResource(ctx context.Context, req *proto.GetResourceRequest) (*proto.GetResourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/get-resource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetResourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetPendFinding(ctx context.Context, req *proto.GetPendFindingRequest) (*proto.GetPendFindingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/get-pend-finding", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetPendFindingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListFindingSetting(ctx context.Context, req *proto.ListFindingSettingRequest) (*proto.ListFindingSettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/list-finding-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListFindingSettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetRecommend(ctx context.Context, req *proto.GetRecommendRequest) (*proto.GetRecommendResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/get-recommend", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetRecommendResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetAISummary(ctx context.Context, req *proto.GetAISummaryRequest) (*proto.GetAISummaryResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/finding/get-ai-summary", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetAISummaryResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) PutFinding(ctx context.Context, req *proto.PutFindingRequest) (*proto.PutFindingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/put-finding", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutFindingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteFinding(ctx context.Context, req *proto.DeleteFindingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/delete-finding", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) TagFinding(ctx context.Context, req *proto.TagFindingRequest) (*proto.TagFindingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/tag-finding", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.TagFindingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UntagFinding(ctx context.Context, req *proto.UntagFindingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/untag-finding", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutResource(ctx context.Context, req *proto.PutResourceRequest) (*proto.PutResourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/put-resource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutResourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteResource(ctx context.Context, req *proto.DeleteResourceRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/delete-resource", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutPendFinding(ctx context.Context, req *proto.PutPendFindingRequest) (*proto.PutPendFindingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/put-pend-finding", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutPendFindingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeletePendFinding(ctx context.Context, req *proto.DeletePendFindingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/delete-pend-finding", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutFindingSetting(ctx context.Context, req *proto.PutFindingSettingRequest) (*proto.PutFindingSettingResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/put-finding-setting", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutFindingSettingResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteFindingSetting(ctx context.Context, req *proto.DeleteFindingSettingRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/delete-finding-setting", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) PutRecommend(ctx context.Context, req *proto.PutRecommendRequest) (*proto.PutRecommendResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/finding/put-recommend", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutRecommendResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
