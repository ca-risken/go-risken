// AUTOGENERATED FILE BY CODE GENERATOR. DO NOT EDIT.
// Source: generator.yaml
package risken

import (
	"context"

	proto "github.com/ca-risken/datasource-api/proto/google"
)

func (c *Client) ListGoogleDataSource(ctx context.Context, req *proto.ListGoogleDataSourceRequest) (*proto.ListGoogleDataSourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/google/list-google-datasource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListGoogleDataSourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) ListGCP(ctx context.Context, req *proto.ListGCPRequest) (*proto.ListGCPResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/google/list-gcp", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.ListGCPResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetGCPDataSource(ctx context.Context, req *proto.GetGCPDataSourceRequest) (*proto.GetGCPDataSourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "GET", "/api/v1/google/get-gcp-datasource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.GetGCPDataSourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) PutGCP(ctx context.Context, req *proto.PutGCPRequest) (*proto.PutGCPResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/google/put-gcp", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.PutGCPResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteGCP(ctx context.Context, req *proto.DeleteGCPRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/google/delete-gcp", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) AttachGCPDataSource(ctx context.Context, req *proto.AttachGCPDataSourceRequest) (*proto.AttachGCPDataSourceResponse, error) {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/google/attach-gcp-datasource", req)
	if err != nil {
		return nil, err
	}
	httpResp, err := c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	var resp proto.AttachGCPDataSourceResponse
	if err := decodeBodyWithDataKey(httpResp, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DetachGCPDataSource(ctx context.Context, req *proto.DetachGCPDataSourceRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/google/detach-gcp-datasource", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}

func (c *Client) InvokeScanGCP(ctx context.Context, req *proto.InvokeScanGCPRequest) error {
	httpReq, err := c.NewRequest(ctx, "POST", "/api/v1/google/invoke-scan-gcp", req)
	if err != nil {
		return err
	}
	if _, err := c.Do(httpReq); err != nil {
		return err
	}
	return nil
}
